{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Order } from 'src/app/models/order';\nimport { ProductInOrder } from 'src/app/models/productInOrder';\nexport let AddOrderComponent = class AddOrderComponent {\n  constructor(customerService, statusesService, productsService, orderService, router) {\n    this.customerService = customerService;\n    this.statusesService = statusesService;\n    this.productsService = productsService;\n    this.orderService = orderService;\n    this.router = router;\n    this.customers = [];\n    this.statuses = [];\n    this.products = [];\n    this.newOrder = new Order();\n    this.idOrder = 0;\n    this.orders = [];\n    this.orderAdded = new EventEmitter();\n  }\n  ngOnInit() {\n    this.customerService.getCustomers().subscribe(result => {\n      this.customers = result;\n    });\n    this.statusesService.getStatues().subscribe(result => {\n      this.statuses = result;\n    });\n    this.productsService.getProducts().subscribe(result => {\n      this.products = result;\n    });\n  }\n  addProductsToOrder() {\n    let product = this.products[0];\n    this.newOrder.productsInOrder.push(new ProductInOrder());\n    let iterator = this.newOrder.productsInOrder.length - 1;\n    this.newOrder.productsInOrder[iterator].product = product;\n    this.newOrder.productsInOrder[iterator].orderQuantity = 1;\n    this.newOrder.productsInOrder[iterator].productSize.productSizeId = 1;\n    this.newOrder.productsInOrder[iterator].productSize.name = \"Small\";\n    this.newOrder.totalCost += this.newOrder.productsInOrder[iterator].product.price;\n    console.log(this.newOrder.productsInOrder);\n  }\n  saveOrder(newOrder) {\n    let customer = this.customers.find(p => p.customerId == newOrder.client.customerId);\n    if (customer != null) {\n      newOrder.client.address = customer.address;\n      newOrder.client.name = customer.name;\n      newOrder.client.date = customer.date;\n      newOrder.client.ordersCount = customer.ordersCount;\n    }\n    this.orderService.postNewOrder(newOrder).subscribe(result => {\n      this.orderAdded.emit(result);\n      console.log(result);\n    });\n    this.router.navigate(['/']);\n  }\n  cancel() {\n    this.router.navigate(['/']);\n  }\n};\n__decorate([Output()], AddOrderComponent.prototype, \"orderAdded\", void 0);\nAddOrderComponent = __decorate([Component({\n  selector: 'app-add-order',\n  templateUrl: './add-order.component.html',\n  styleUrls: ['./add-order.component.css']\n  //standalone: true,\n  //imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule]\n})\n// @Component({\n//   selector: 'select-form-example',\n//   templateUrl: 'select-form-example.html',\n//   standalone: true,\n//   imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule],\n// })\n], AddOrderComponent);","map":{"version":3,"names":["Component","EventEmitter","Output","Order","ProductInOrder","AddOrderComponent","constructor","customerService","statusesService","productsService","orderService","router","customers","statuses","products","newOrder","idOrder","orders","orderAdded","ngOnInit","getCustomers","subscribe","result","getStatues","getProducts","addProductsToOrder","product","productsInOrder","push","iterator","length","orderQuantity","productSize","productSizeId","name","totalCost","price","console","log","saveOrder","customer","find","p","customerId","client","address","date","ordersCount","postNewOrder","emit","navigate","cancel","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Test_Task\\TestTask.UI\\src\\app\\components\\add-order\\add-order.component.ts"],"sourcesContent":["import { NgFor } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, Validators } from '@angular/forms';\nimport { Order } from 'src/app/models/order';\n\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { Customer } from 'src/app/models/customer';\nimport { CustomersService } from 'src/app/services/customers.service';\nimport { Router } from '@angular/router';\nimport { Status } from 'src/app/models/status';\nimport { StatusesService } from 'src/app/services/statuses.service';\nimport { Product } from 'src/app/models/product';\nimport { ProductsService } from 'src/app/services/products.service';\nimport { ProductInOrder } from 'src/app/models/productInOrder';\nimport { OrdersService } from 'src/app/services/orders.service';\n\n@Component({\n  selector: 'app-add-order',\n  templateUrl: './add-order.component.html',\n  styleUrls: ['./add-order.component.css'],\n  //standalone: true,\n  //imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule]\n})\n\n// @Component({\n//   selector: 'select-form-example',\n//   templateUrl: 'select-form-example.html',\n//   standalone: true,\n//   imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule],\n// })\n\n export class AddOrderComponent implements OnInit {\n  customers: Customer[] = [];\n  statuses: Status[] = [];\n  products: Product[] = [];\n  newOrder = new Order;\n  idOrder = 0;\n  orders:Order[] = [];\n  @Output() orderAdded = new EventEmitter<Order[]>();\n\n\n  constructor(private customerService: CustomersService, \n              private statusesService: StatusesService,\n              private productsService: ProductsService,\n              private orderService: OrdersService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    this.customerService\n      .getCustomers()\n      .subscribe((result: Customer[]) => { \n        this.customers = result;\n      });\n    \n    this.statusesService\n      .getStatues()\n      .subscribe((result: Status[]) => {\n        this.statuses = result;\n      });\n\n      this.productsService\n      .getProducts()\n      .subscribe((result: Product[]) => {\n        this.products = result;\n      });\n      \n  }\n\n  addProductsToOrder(){\n    let product = this.products[0];\n    this.newOrder.productsInOrder.push(new ProductInOrder);\n    let iterator = this.newOrder.productsInOrder.length - 1;\n    this.newOrder.productsInOrder[iterator].product = product;\n    this.newOrder.productsInOrder[iterator].orderQuantity = 1;\n    this.newOrder.productsInOrder[iterator].productSize.productSizeId = 1;\n    this.newOrder.productsInOrder[iterator].productSize.name = \"Small\";\n\n    this.newOrder.totalCost += this.newOrder.productsInOrder[iterator].product.price;\n    console.log(this.newOrder.productsInOrder);\n  }\n\n  saveOrder(newOrder: Order){\n    let customer = this.customers.find(p => p.customerId == newOrder.client.customerId);\n    if(customer != null){\n      newOrder.client.address = customer.address;\n      newOrder.client.name = customer.name;\n      newOrder.client.date = customer.date;\n      newOrder.client.ordersCount = customer.ordersCount;\n    }\n    \n    this.orderService\n      .postNewOrder(newOrder)\n      .subscribe((result: Order[]) => {\n        this.orderAdded.emit(result);\n        console.log(result);\n      });\n\n      this.router.navigate(['/']);\n  }\n\n  cancel(){\n    this.router.navigate(['/']);\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}