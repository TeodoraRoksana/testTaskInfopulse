{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Order } from 'src/app/models/order';\nimport { ProductInOrder } from 'src/app/models/productInOrder';\nexport let AddOrderComponent = class AddOrderComponent {\n  // angForm?: FormGroup;\n  constructor(customerService, statusesServer, productsServer, orderService) {\n    this.customerService = customerService;\n    this.statusesServer = statusesServer;\n    this.productsServer = productsServer;\n    this.orderService = orderService;\n    this.customers = [];\n    this.statuses = [];\n    this.products = [];\n    //@Input() newOrder?: Order;\n    this.newOrder = new Order();\n    this.idOrder = 0;\n    this.orders = [];\n  }\n  ngOnInit() {\n    this.customerService.getCustomers().subscribe(result => {});\n    this.statusesServer.getStatues().subscribe(result => {\n      this.statuses = result;\n    });\n    this.productsServer.getProducts().subscribe(result => {\n      this.products = result;\n    });\n    this.orderService.getOrders().subscribe(result => {\n      this.orders = result;\n      this.idOrder = result[result.length - 1].id;\n      console.log(this.orders);\n    });\n    this.newOrder.id = this.idOrder + 1;\n  }\n  // createForm() {\n  //   this.angForm = this.fb.group({stat: ['', Validators.required]});\n  // }\n  addProductsToOrder() {\n    let product = this.products[0];\n    this.newOrder.productsInOrder.push(new ProductInOrder());\n    let iterator = this.newOrder.productsInOrder.length - 1;\n    this.newOrder.productsInOrder[iterator].product = product;\n    this.newOrder.productsInOrder[iterator].orderQuantity = 1;\n    this.newOrder.productsInOrder[iterator].productSize.productSizeId = 1;\n    this.newOrder.productsInOrder[iterator].productSize.name = \"Small\";\n    this.newOrder.totalCost += this.newOrder.productsInOrder[iterator].product.price;\n    console.log(this.newOrder.productsInOrder);\n  }\n  saveOrder(newOrder) {\n    //let customer = this.customers.find(p => p.customerId == newOrder.client.customerId);\n    // if(customer != null){\n    //   newOrder.client.address = customer.address;\n    //   newOrder.client.name = customer.name;\n    //   newOrder.client.\n    // }\n    console.log(newOrder);\n  }\n  cancel() {}\n};\nAddOrderComponent = __decorate([Component({\n  selector: 'app-add-order',\n  templateUrl: './add-order.component.html',\n  styleUrls: ['./add-order.component.css']\n  //standalone: true,\n  //imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule]\n})\n// @Component({\n//   selector: 'select-form-example',\n//   templateUrl: 'select-form-example.html',\n//   standalone: true,\n//   imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule],\n// })\n], AddOrderComponent);","map":{"version":3,"names":["Component","Order","ProductInOrder","AddOrderComponent","constructor","customerService","statusesServer","productsServer","orderService","customers","statuses","products","newOrder","idOrder","orders","ngOnInit","getCustomers","subscribe","result","getStatues","getProducts","getOrders","length","id","console","log","addProductsToOrder","product","productsInOrder","push","iterator","orderQuantity","productSize","productSizeId","name","totalCost","price","saveOrder","cancel","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Test_Task\\TestTask.UI\\src\\app\\components\\add-order\\add-order.component.ts"],"sourcesContent":["import { NgFor } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, Validators } from '@angular/forms';\nimport { Order } from 'src/app/models/order';\n\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { Customer } from 'src/app/models/customer';\nimport { CustomersService } from 'src/app/services/customers.service';\nimport { Router } from '@angular/router';\nimport { Status } from 'src/app/models/status';\nimport { StatusesService } from 'src/app/services/statuses.service';\nimport { Product } from 'src/app/models/product';\nimport { ProductsService } from 'src/app/services/products.service';\nimport { ProductInOrder } from 'src/app/models/productInOrder';\nimport { OrdersService } from 'src/app/services/orders.service';\n\n@Component({\n  selector: 'app-add-order',\n  templateUrl: './add-order.component.html',\n  styleUrls: ['./add-order.component.css'],\n  //standalone: true,\n  //imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule]\n})\n\n// @Component({\n//   selector: 'select-form-example',\n//   templateUrl: 'select-form-example.html',\n//   standalone: true,\n//   imports: [FormsModule, MatFormFieldModule, MatSelectModule, NgFor, MatInputModule],\n// })\n\n export class AddOrderComponent implements OnInit {\n  customers: Customer[] = [];\n  statuses: Status[] = [];\n  products: Product[] = [];\n  //@Input() newOrder?: Order;\n  newOrder = new Order;\n  idOrder = 0;\n  orders: Order[] = [];\n  // angForm?: FormGroup;\n\n\n  constructor(private customerService: CustomersService, \n              private statusesServer: StatusesService,\n              private productsServer: ProductsService,\n              private orderService: OrdersService) { }\n\n  ngOnInit(): void {\n    this.customerService\n      .getCustomers()\n      .subscribe((result: Customer[]) => { \n      });\n    \n    this.statusesServer\n      .getStatues()\n      .subscribe((result: Status[]) => {\n        this.statuses = result;\n      });\n\n      this.productsServer\n      .getProducts()\n      .subscribe((result: Product[]) => {\n        this.products = result;\n      });\n      this.orderService\n      .getOrders()\n      .subscribe((result: Order[]) => { \n        this.orders = result;\n        this.idOrder = result[result.length - 1].id;\n       console.log(this.orders);\n      });\n\n    this.newOrder.id = this.idOrder + 1;\n  }\n\n  // createForm() {\n  //   this.angForm = this.fb.group({stat: ['', Validators.required]});\n  // }\n  addProductsToOrder(){\n    let product = this.products[0];\n    this.newOrder.productsInOrder.push(new ProductInOrder);\n    let iterator = this.newOrder.productsInOrder.length - 1;\n    this.newOrder.productsInOrder[iterator].product = product;\n    this.newOrder.productsInOrder[iterator].orderQuantity = 1;\n    this.newOrder.productsInOrder[iterator].productSize.productSizeId = 1;\n    this.newOrder.productsInOrder[iterator].productSize.name = \"Small\";\n\n    this.newOrder.totalCost += this.newOrder.productsInOrder[iterator].product.price;\n    console.log(this.newOrder.productsInOrder);\n  }\n\n  saveOrder(newOrder: Order){\n    //let customer = this.customers.find(p => p.customerId == newOrder.client.customerId);\n    // if(customer != null){\n    //   newOrder.client.address = customer.address;\n    //   newOrder.client.name = customer.name;\n    //   newOrder.client.\n    // }\n    \n\n    console.log(newOrder);\n  }\n\n  cancel(){}\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}